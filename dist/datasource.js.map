{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","headers","jsonData","apiKey","doRequest","method","then","response","status","message","title","options","result","i","data","incidents","length","d","annotation","serviceId","service","id","urgency","created_at","Date","parse","annotation_end","last_status_change_at","now","incident","enabled","datasource","time","isRegion","timeEnd","tags","incident_key","incident_number","text","html_url","filter","el","push","queryString","range","from","toISOString","to","transformResponse","datasourceRequest"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = 'https://api.pagerduty.com/incidents?time_zone=UTC';\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.headers = {'Accept': 'application/vnd.pagerduty+json;version=2'};\n    this.headers['Authorization'] = 'Token token=' + instanceSettings.jsonData.apiKey;\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url,\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  transformResponse(response, options) {\n\n    var result = [];\n    for(var i = 0; i < response.data.incidents.length; i++){\n        var d = response.data.incidents[i];\n        if (options.annotation.serviceId && d.service.id != options.annotation.serviceId) {\n            continue;\n        }\n        if (options.annotation.urgency && d.urgency != options.annotation.urgency) {\n            continue;\n        }\n        if (options.annotation.status && d.status != options.annotation.status) {\n            continue;\n        }\n        var created_at = Date.parse(d.created_at);\n\n        var annotation_end = (d.status === 'resolved')? Date.parse(d.last_status_change_at) : Date.now();\n\n        var incident = { annotation:\n            { name: d.id,\n              enabled: true,\n              datasource: \"grafana-pagerduty\"\n            },\n            title: d.title,\n            time: created_at,\n            isRegion: true,\n            timeEnd: annotation_end,\n            tags: [ d.type, d.incident_key, d.incident_number, d.status, d.service.id ],\n            text: '<a target=\"_blank\" href=\"' + d.html_url + '\">PagerDuty incident page</a>',\n        };\n\n        incident.tags = incident.tags.filter(function (el) {\n            return el != null;\n        });\n\n        result.push(incident);\n    }\n    return result;\n  }\n\n  annotationQuery(options) {\n    // var query = JSON.parse(this.templateSrv.replace(options.annotation.query, {}, 'glob'));\n\n    var queryString = \"\";\n\n    queryString += \"&since=\" + new Date(options.range.from).toISOString();\n    queryString += \"&until=\" + new Date(options.range.to).toISOString();\n\n    return this.doRequest({\n      url: this.url + queryString,\n      method: 'GET'\n    }).then(response => {\n        var result = this.transformResponse(response, options);\n        return result;\n    });\n  }\n\n  doRequest(options) {\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n}\n"]}